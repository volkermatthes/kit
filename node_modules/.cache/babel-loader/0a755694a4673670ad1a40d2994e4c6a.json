{"ast":null,"code":"var _jsxFileName = \"/Users/volkermatthes/Coding/Diverse/kit/src/components/Checkbox.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nconst StyledInput = styled.input`\n    display: none;\n`;\nconst StyledCheckbox = styled.label`\n    &:before {\n        width: 16px;\n        height: 16px;\n        display: block;\n        background-color: var(--color-secondary2);\n        border-radius: var(--border-radius);\n        content: ' ';\n    }\n`;\nconst StyledLabel = styled.span`\n`;\n\nconst Checkbox = ({\n  className,\n  label,\n  disabled,\n  onChange,\n  checked,\n  ...rest\n}) => {\n  const [isChecked, setIsChecked] = useState(!!checked);\n  useEffect(() => {\n    setIsChecked(checked);\n    console.log(checked);\n  }, [checked]);\n\n  const handleChange = e => {\n    if (checked === undefined) {\n      setIsChecked(e.target.checked);\n    }\n\n    if (onChange) {\n      return onChange(e);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(StyledCheckbox, {\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StyledInput, Object.assign({\n    type: \"checkbox\",\n    checked: checked !== undefined ? checked : isChecked,\n    disabled: disabled,\n    onChange: handleChange\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  })), label && /*#__PURE__*/React.createElement(StyledLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 19\n    }\n  }, label));\n};\n\nexport default Checkbox;","map":{"version":3,"sources":["/Users/volkermatthes/Coding/Diverse/kit/src/components/Checkbox.tsx"],"names":["React","useState","useEffect","styled","StyledInput","input","StyledCheckbox","label","StyledLabel","span","Checkbox","className","disabled","onChange","checked","rest","isChecked","setIsChecked","console","log","handleChange","e","undefined","target"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA6CC,SAA7C,QAAmF,OAAnF;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAOA,MAAMC,WAAW,GAAGD,MAAM,CAACE,KAAM;;CAAjC;AAIA,MAAMC,cAAc,GAAGH,MAAM,CAACI,KAAM;;;;;;;;;CAApC;AAWA,MAAMC,WAAW,GAAGL,MAAM,CAACM,IAAK;CAAhC;;AAGA,MAAMC,QAA0C,GAAG,CAAC;AAACC,EAAAA,SAAD;AAAYJ,EAAAA,KAAZ;AAAmBK,EAAAA,QAAnB;AAA6BC,EAAAA,QAA7B;AAAuCC,EAAAA,OAAvC;AAAgD,KAAGC;AAAnD,CAAD,KAA8D;AAC7G,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,CAAC,CAACa,OAAH,CAA1C;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,YAAY,CAACH,OAAD,CAAZ;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACH,GAHQ,EAGN,CAACA,OAAD,CAHM,CAAT;;AAKA,QAAMM,YAAY,GAAGC,CAAC,IAAI;AACtB,QAAIP,OAAO,KAAKQ,SAAhB,EAA2B;AACvBL,MAAAA,YAAY,CAACI,CAAC,CAACE,MAAF,CAAST,OAAV,CAAZ;AACH;;AACD,QAAID,QAAJ,EAAc;AACZ,aAAOA,QAAQ,CAACQ,CAAD,CAAf;AACD;AACF,GAPH;;AASA,sBACI,oBAAC,cAAD;AAAgB,IAAA,SAAS,EAAEV,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AAAa,IAAA,IAAI,EAAC,UAAlB;AAA6B,IAAA,OAAO,EAAEG,OAAO,KAAKQ,SAAZ,GAAwBR,OAAxB,GAAkCE,SAAxE;AAAmF,IAAA,QAAQ,EAAEJ,QAA7F;AAAuG,IAAA,QAAQ,EAAEQ;AAAjH,KAAmIL,IAAnI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ,EAECR,KAAK,iBAAI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcA,KAAd,CAFV,CADJ;AAMH,CAvBD;;AAyBA,eAAeG,QAAf","sourcesContent":["import React, { useState, FunctionComponent, useEffect, InputHTMLAttributes } from 'react';\nimport styled from 'styled-components';\n\ninterface CheckboxProps extends InputHTMLAttributes<HTMLInputElement> {\n  checked?: boolean;\n  label?: string;\n}\n\nconst StyledInput = styled.input`\n    display: none;\n`;\n\nconst StyledCheckbox = styled.label`\n    &:before {\n        width: 16px;\n        height: 16px;\n        display: block;\n        background-color: var(--color-secondary2);\n        border-radius: var(--border-radius);\n        content: ' ';\n    }\n`;\n\nconst StyledLabel = styled.span`\n`;\n\nconst Checkbox: FunctionComponent<CheckboxProps> = ({className, label, disabled, onChange, checked, ...rest}) => {\n    const [isChecked, setIsChecked] = useState(!!checked);\n\n    useEffect(() => {\n        setIsChecked(checked)\n        console.log(checked)\n    }, [checked])\n\n    const handleChange = e => {\n        if (checked === undefined) {\n            setIsChecked(e.target.checked)\n        }\n        if (onChange) {\n          return onChange(e)\n        }\n      }\n\n    return (\n        <StyledCheckbox className={className}>\n            <StyledInput type=\"checkbox\" checked={checked !== undefined ? checked : isChecked} disabled={disabled} onChange={handleChange} {...rest} />\n        {label && <StyledLabel>{label}</StyledLabel>}\n        </StyledCheckbox>\n    )\n};\n\nexport default Checkbox;\n"]},"metadata":{},"sourceType":"module"}