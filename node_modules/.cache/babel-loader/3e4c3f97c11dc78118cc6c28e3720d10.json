{"ast":null,"code":"var _jsxFileName = \"/Users/volkermatthes/Coding/Diverse/kit/src/components/Button.tsx\";\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport Loader from './Loader';\n\nconst getTypeStyle = kind => {\n  if (kind === 'secondary') {\n    return css`\n      background-color: var(--color-secondary1);\n      &:disabled {\n        color: var(--color-secondary2);\n      }\n      &:not([disabled]) {\n        color: var(--color-black);\n        &:hover,\n        &:focus {\n          background-color: var(--color-secondary2);\n        }\n      }\n      &.active,\n      &:active {\n        background-color: var(--color-secondary3);\n        color: var(--color-white);\n      }\n    `;\n  }\n\n  if (kind === 'danger') {\n    return css`\n      background-color: var(--color-error1);\n      &:disabled {\n        color: var(--color-error2);\n      }\n      &:not([disabled]) {\n        color: var(--color-error3);\n        &:hover,\n        &:focus {\n          background-color: var(--color-error2);\n        }\n      }\n      &.active,\n      &:active {\n        background-color: var(--color-error3);\n        color: var(--color-white);\n      }\n    `;\n  }\n\n  if (kind === 'ghost') {\n    return css`\n      background-color: var(--color-transparent);\n      &:disabled {\n        color: var(--color-secondary2);\n      }\n      &:not([disabled]) {\n        color: var(--color-black);\n        &:hover,\n        &:focus {\n          background-color: var(--color-secondary2);\n        }\n      }\n      &.active,\n      &:active {\n        background-color: var(--color-secondary3);\n        color: var(--color-white);\n      }\n    `;\n  }\n\n  return css`\n    background-color: var(--color-primary1);\n    &:disabled {\n      color: var(--color-primary2);\n    }\n    &:not([disabled]) {\n      color: var(--color-primary3);\n      &:hover,\n      &:focus {\n        background-color: var(--color-primary2);\n      }\n    }\n    &.active,\n    &:active {\n      background-color: var(--color-primary3);\n      color: var(--color-white);\n    }\n  `;\n};\n\nconst getSizeStyle = size => {\n  if (size === 'field') {\n    return css`\n      height: var(--element-height-field);\n      padding: 0 8px;\n      font-size: 14px;\n    `;\n  }\n\n  if (size === 'small') {\n    return css`\n      height: var(--element-height-small);\n      padding: 0 8px;\n      font-size: 12px;\n    `;\n  }\n\n  return css`\n    height: var(--element-height-default);\n    padding: 0 16px;\n    font-size: 14px;\n  `;\n};\n\nconst StyledButton = styled.button`\n  ${({\n  kind,\n  size\n}) => css`\n      display: inline-flex;\n      font-weight: 700;\n      justify-content: center;\n      align-items: center;\n      cursor: pointer;\n      transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\n      border: none;\n      border-radius: var(--border-radius);\n      text-decoration: none;\n      outline: 0;\n      &:disabled {\n        cursor: not-allowed;\n      }\n      ${props => getSizeStyle(size)};\n      ${props => getTypeStyle(kind)};\n    `}\n`;\nconst StyledIconWrapper = styled.span`\n      margin-right: 4px;\n`;\n\nconst Button = ({\n  icon,\n  children,\n  loading,\n  ...rest\n}) => {\n  return /*#__PURE__*/React.createElement(StyledButton, Object.assign({}, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }\n  }), loading ? /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 18\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, icon && /*#__PURE__*/React.createElement(StyledIconWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, icon), children));\n};\n\nButton.defaultProps = {\n  size: 'default',\n  kind: 'primary',\n  loading: false\n};\nexport default Button;","map":{"version":3,"sources":["/Users/volkermatthes/Coding/Diverse/kit/src/components/Button.tsx"],"names":["React","styled","css","Loader","getTypeStyle","kind","getSizeStyle","size","StyledButton","button","props","StyledIconWrapper","span","Button","icon","children","loading","rest","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,MAAyD,OAAzD;AACA,OAAOC,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AASA,MAAMC,YAAY,GAAIC,IAAD,IAAkB;AACrC,MAAIA,IAAI,KAAK,WAAb,EAA0B;AACxB,WAAOH,GAAI;;;;;;;;;;;;;;;;;KAAX;AAkBD;;AACD,MAAIG,IAAI,KAAK,QAAb,EAAuB;AACrB,WAAOH,GAAI;;;;;;;;;;;;;;;;;KAAX;AAkBD;;AACD,MAAIG,IAAI,KAAK,OAAb,EAAsB;AACpB,WAAOH,GAAI;;;;;;;;;;;;;;;;;KAAX;AAkBD;;AACD,SAAOA,GAAI;;;;;;;;;;;;;;;;;GAAX;AAkBD,CA/ED;;AAiFA,MAAMI,YAAY,GAAIC,IAAD,IAAe;AAClC,MAAIA,IAAI,KAAK,OAAb,EAAsB;AACpB,WAAOL,GAAI;;;;KAAX;AAKD;;AACD,MAAIK,IAAI,KAAK,OAAb,EAAsB;AACpB,WAAOL,GAAI;;;;KAAX;AAKD;;AACD,SAAOA,GAAI;;;;GAAX;AAKD,CApBD;;AAsBA,MAAMM,YAAY,GAAGP,MAAM,CAACQ,MAAO;IAC/B,CAAC;AAAEJ,EAAAA,IAAF;AAAQE,EAAAA;AAAR,CAAD,KACAL,GAAI;;;;;;;;;;;;;;QAcCQ,KAAD,IAAgBJ,YAAY,CAACC,IAAD,CAAO;QAClCG,KAAD,IAAgBN,YAAY,CAACC,IAAD,CAAO;KACrC;CAlBN;AAqBA,MAAMM,iBAAiB,GAAGV,MAAM,CAACW,IAAK;;CAAtC;;AAIA,MAAMC,MAAsC,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA,OAAlB;AAA2B,KAAGC;AAA9B,CAAD,KAA0C;AACvF,sBACE,oBAAC,YAAD,oBAAkBA,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGD,OAAO,gBAAG,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,gBACN,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,IAAI,iBACH,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,IADH,CAFJ,EAMGC,QANH,CAFJ,CADF;AAcD,CAfD;;AAiBAF,MAAM,CAACK,YAAP,GAAsB;AACpBX,EAAAA,IAAI,EAAE,SADc;AAEpBF,EAAAA,IAAI,EAAE,SAFc;AAGpBW,EAAAA,OAAO,EAAE;AAHW,CAAtB;AAMA,eAAeH,MAAf","sourcesContent":["import React, { FunctionComponent, HTMLAttributes } from 'react';\nimport styled, { css } from 'styled-components';\nimport Loader from './Loader';\n\ninterface ButtonProps extends HTMLAttributes<HTMLButtonElement> {\n  kind?: 'primary' | 'submit' | 'secondary' | 'danger' | 'ghost';\n  size?: 'default' | 'field' | 'small';\n  icon?: React.ReactNode;\n  loading?: boolean;\n}\n\nconst getTypeStyle = (kind: string) => {\n  if (kind === 'secondary') {\n    return css`\n      background-color: var(--color-secondary1);\n      &:disabled {\n        color: var(--color-secondary2);\n      }\n      &:not([disabled]) {\n        color: var(--color-black);\n        &:hover,\n        &:focus {\n          background-color: var(--color-secondary2);\n        }\n      }\n      &.active,\n      &:active {\n        background-color: var(--color-secondary3);\n        color: var(--color-white);\n      }\n    `;\n  }\n  if (kind === 'danger') {\n    return css`\n      background-color: var(--color-error1);\n      &:disabled {\n        color: var(--color-error2);\n      }\n      &:not([disabled]) {\n        color: var(--color-error3);\n        &:hover,\n        &:focus {\n          background-color: var(--color-error2);\n        }\n      }\n      &.active,\n      &:active {\n        background-color: var(--color-error3);\n        color: var(--color-white);\n      }\n    `;\n  }\n  if (kind === 'ghost') {\n    return css`\n      background-color: var(--color-transparent);\n      &:disabled {\n        color: var(--color-secondary2);\n      }\n      &:not([disabled]) {\n        color: var(--color-black);\n        &:hover,\n        &:focus {\n          background-color: var(--color-secondary2);\n        }\n      }\n      &.active,\n      &:active {\n        background-color: var(--color-secondary3);\n        color: var(--color-white);\n      }\n    `;\n  }\n  return css`\n    background-color: var(--color-primary1);\n    &:disabled {\n      color: var(--color-primary2);\n    }\n    &:not([disabled]) {\n      color: var(--color-primary3);\n      &:hover,\n      &:focus {\n        background-color: var(--color-primary2);\n      }\n    }\n    &.active,\n    &:active {\n      background-color: var(--color-primary3);\n      color: var(--color-white);\n    }\n  `;\n};\n\nconst getSizeStyle = (size: any) => {\n  if (size === 'field') {\n    return css`\n      height: var(--element-height-field);\n      padding: 0 8px;\n      font-size: 14px;\n    `;\n  }\n  if (size === 'small') {\n    return css`\n      height: var(--element-height-small);\n      padding: 0 8px;\n      font-size: 12px;\n    `;\n  }\n  return css`\n    height: var(--element-height-default);\n    padding: 0 16px;\n    font-size: 14px;\n  `;\n};\n\nconst StyledButton = styled.button`\n  ${({ kind, size }: ButtonProps) =>\n    css`\n      display: inline-flex;\n      font-weight: 700;\n      justify-content: center;\n      align-items: center;\n      cursor: pointer;\n      transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\n      border: none;\n      border-radius: var(--border-radius);\n      text-decoration: none;\n      outline: 0;\n      &:disabled {\n        cursor: not-allowed;\n      }\n      ${(props: any) => getSizeStyle(size)};\n      ${(props: any) => getTypeStyle(kind)};\n    `}\n`;\n\nconst StyledIconWrapper = styled.span`\n      margin-right: 4px;\n`;\n\nconst Button: FunctionComponent<ButtonProps> = ({ icon, children, loading, ...rest }) => {\n  return (\n    <StyledButton {...rest}>\n      {loading ? <Loader /> : (\n        <React.Fragment>\n          {icon && (\n            <StyledIconWrapper>\n              {icon}\n            </StyledIconWrapper>\n          )}\n          {children}\n        </React.Fragment>\n      )}\n    </StyledButton>\n  );\n};\n\nButton.defaultProps = {\n  size: 'default',\n  kind: 'primary',\n  loading: false,\n};\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}